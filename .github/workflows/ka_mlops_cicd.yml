# Ka-MLOps Complete CI/CD Pipeline
name: Ka-MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly retraining on Sunday 2 AM

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: 365021531163.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY: ka-mlops-api
  EKS_CLUSTER_NAME: loan-eks-simple
  KA_NAMESPACE: loan-default

jobs:
  # Job 1: Code Quality & Testing
  test-and-validate:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('ka_requirements.txt') }}
    
    - name: Install dependencies
      run: |
        pip install -r ka_requirements.txt
        pip install pytest pytest-cov black flake8 safety bandit
    
    - name: Code quality checks
      run: |
        echo " Running Ka code quality checks..."
        black --check src/ka_modules/ src/ka_api/ || echo "Code formatting issues found"
        flake8 src/ka_modules/ src/ka_api/ --max-line-length=100 || echo "Linting issues found"
    
    - name: Security checks
      run: |
        echo " Running Ka security checks..."
        safety check
        bandit -r src/ka_modules/ src/ka_api/ -f json || echo "Security issues found"
    
    - name: Run Ka unit tests
      run: |
        echo "🧪 Running Ka unit tests..."
        python -m pytest tests/ka_tests/ -v --cov=src/ka_modules --cov-report=xml
    
    - name: Check for changes requiring deployment
      id: changes
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # Job 2: Model Training & Validation
  train-and-validate-model:
    needs: test-and-validate
    runs-on: ubuntu-latest
    if: needs.test-and-validate.outputs.should-deploy == 'true'
    outputs:
      model-performance: ${{ steps.training.outputs.f1-score }}
      model-ready: ${{ steps.validation.outputs.ready }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r ka_requirements.txt
    
    - name: Generate Ka training data
      run: |
        echo " Generating Ka training data..."
        python -c "
import pandas as pd
import numpy as np
from pathlib import Path

# Create sample data for CI/CD
np.random.seed(42)
n_samples = 5000

data = {
    'loan_amnt': np.random.uniform(1000, 40000, n_samples),
    'int_rate': np.random.uniform(5.5, 28.0, n_samples),
    'annual_inc': np.random.uniform(20000, 150000, n_samples),
    'dti': np.random.uniform(0, 40, n_samples),
    'fico_range_low': np.random.randint(300, 850, n_samples),
    'fico_range_high': np.random.randint(300, 850, n_samples),
    'installment': np.random.uniform(50, 1500, n_samples),
    'delinq_2yrs': np.random.poisson(0.5, n_samples),
    'inq_last_6mths': np.random.poisson(1.2, n_samples),
    'open_acc': np.random.poisson(10, n_samples),
    'pub_rec': np.random.poisson(0.2, n_samples),
    'revol_bal': np.random.uniform(0, 50000, n_samples),
    'revol_util': np.random.uniform(0, 100, n_samples),
    'total_acc': np.random.poisson(20, n_samples),
    'mort_acc': np.random.poisson(1.5, n_samples),
    'pub_rec_bankruptcies': np.random.poisson(0.1, n_samples),
    'term': np.random.choice([' 36 months', ' 60 months'], n_samples),
    'grade': np.random.choice(['A', 'B', 'C', 'D', 'E', 'F', 'G'], n_samples),
    'emp_length': np.random.choice(['< 1 year', '1 year', '2 years', '3 years', '4 years', '5 years', '6 years', '7 years', '8 years', '9 years', '10+ years', 'n/a'], n_samples),
    'home_ownership': np.random.choice(['RENT', 'OWN', 'MORTGAGE', 'OTHER'], n_samples),
    'verification_status': np.random.choice(['Verified', 'Source Verified', 'Not Verified'], n_samples),
    'purpose': np.random.choice(['debt_consolidation', 'credit_card', 'home_improvement', 'other'], n_samples),
    'addr_state': np.random.choice(['CA', 'NY', 'TX', 'FL', 'IL'], n_samples),
    'loan_status': np.random.choice(['Fully Paid', 'Charged Off'], n_samples, p=[0.75, 0.25])
}

df = pd.DataFrame(data)
Path('data/raw').mkdir(parents=True, exist_ok=True)
df.to_csv('data/raw/ka_lending_club_dataset.csv', index=False)
print(f' Generated {len(df):,} samples for CI/CD')
"
    
    - name: Run Ka data preprocessing
      run: |
        echo " Running Ka data preprocessing..."
        python src/ka_modules/ka_data_preprocessing.py
    
    - name: Train Ka model
      id: training
      run: |
        echo " Training Ka model..."
        python src/ka_modules/ka_model_training.py > training_output.txt
        
        # Extract F1 score from output
        F1_SCORE=$(grep "F1 Score:" training_output.txt | awk '{print $3}' | head -1)
        echo "f1-score=$F1_SCORE" >> $GITHUB_OUTPUT
        echo " Ka Model F1 Score: $F1_SCORE"
    
    - name: Validate model performance
      id: validation
      run: |
        F1_SCORE="${{ steps.training.outputs.f1-score }}"
        echo " Validating Ka model performance: $F1_SCORE"
        
        if (( $(echo "$F1_SCORE >= 0.65" | bc -l) )); then
          echo " Ka model meets performance criteria (F1 >= 0.65)"
          echo "ready=true" >> $GITHUB_OUTPUT
        else
          echo " Ka model below performance threshold (F1 < 0.65)"
          echo "ready=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ka-model-artifacts
        path: |
          models/ka_models/
          metrics/ka_metrics/
          reports/ka_reports/

  # Job 3: Build and Push Container
  build-and-push:
    needs: [test-and-validate, train-and-validate-model]
    runs-on: ubuntu-latest
    if: needs.train-and-validate-model.outputs.model-ready == 'true'
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: ka-model-artifacts
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Ka container
      id: build
      run: |
        IMAGE_TAG="ka-${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
        IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
        LATEST_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"
        
        echo " Building Ka container..."
        docker build -f ka_dockerfile -t $IMAGE_URI -t $LATEST_URI .
        
        echo " Pushing Ka container..."
        docker push $IMAGE_URI
        docker push $LATEST_URI
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo " Ka container pushed: $IMAGE_URI"

  # Job 4: Deploy to Staging
  deploy-staging:
    needs: [train-and-validate-model, build-and-push]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
    
    - name: Deploy to staging
      run: |
        IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
        IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
        
        echo " Deploying Ka to staging..."
        
        # Update staging deployment
        kubectl set image deployment/ka-mlops-api-staging ka-api=$IMAGE_URI -n ${{ env.KA_NAMESPACE }} || \
        kubectl create deployment ka-mlops-api-staging --image=$IMAGE_URI -n ${{ env.KA_NAMESPACE }}
        
        # Wait for rollout
        kubectl rollout status deployment/ka-mlops-api-staging -n ${{ env.KA_NAMESPACE }} --timeout=300s
    
    - name: Run staging tests
      run: |
        echo " Running Ka staging tests..."
        # Add staging-specific tests here
        kubectl get pods -n ${{ env.KA_NAMESPACE }} -l app=ka-mlops-api-staging

  # Job 5: Deploy to Production
  deploy-production:
    needs: [train-and-validate-model, build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
    
    - name: Deploy to production with blue-green strategy
      run: |
        IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
        IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
        
        echo " Deploying Ka to production..."
        
        # Update production deployment
        kubectl set image deployment/ka-mlops-api ka-api=$IMAGE_URI -n ${{ env.KA_NAMESPACE }}
        
        # Wait for rollout
        kubectl rollout status deployment/ka-mlops-api -n ${{ env.KA_NAMESPACE }} --timeout=600s
        
        echo " Ka production deployment complete!"
    
    - name: Run production smoke tests
      run: |
        echo " Running Ka production smoke tests..."
        
        # Get load balancer URL
        LB_URL=$(kubectl get service ka-mlops-api-service -n ${{ env.KA_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        if [ ! -z "$LB_URL" ]; then
          echo "Testing Ka health endpoint..."
          curl -f "http://$LB_URL/ka-health" || exit 1
          echo " Ka production health check passed!"
        else
          echo " Load balancer URL not ready"
        fi
    
    - name: Notify deployment success
      run: |
        echo " Ka-MLOps production deployment successful!"
        echo " Model F1 Score: ${{ needs.train-and-validate-model.outputs.model-performance }}"
        echo " Image: ${{ needs.build-and-push.outputs.image-tag }}"

  # Job 6: Performance Monitoring
  post-deployment-monitoring:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
    - name: Setup monitoring
      run: |
        echo " Setting up Ka post-deployment monitoring..."
        # Add monitoring setup here
        
    - name: Schedule performance check
      run: |
        echo " Scheduling Ka performance monitoring..."
        # Add performance monitoring schedule
